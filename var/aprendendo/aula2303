# Lista encadeada
from no import No
class ListaEncadeada:
    inicio = None
    fim = None
    quantidade = 0

    def inserir_inicio(self, no):
        if self.inicio is None:
            self.inicio = no
            self.fim = no
            self.quantidade += 1
        else:
            no.proximo = self.inicio
            self.inicio.anterior = no
            self.inicio = no

    def mostrar(self):
        no = self.inicio
        while no is not None:
            if no.proximo:
                print(no.valor, no.proximo.valor)
            else:
                print(no.valor)
            no = no.proximo

    def inserir_final(self, no):
        
    # def inserir_qualquer_lugar(self, valor, valor_busca):

# run

# 1 Crie um algoritmo que popule dinamicamente um aray com 100.000 posições
# 2 Crie um algoritmo que popule uma lsita encadeada com 100.000 posiçõs
# 3 Compare quanto tempo demorou para inserir 100.000 registros na listaencadeada x array
# 4 Implemente um méodo que receba um valor qualquer e um valor de busca
# * insira no proximo valor caso encontre
# * retorne erro se o valor não foi encontrado
# 5 Crie um algoritmo que simule a entrada de x valores
# em uma lista.
# * permita o usuario escolher se deseja visualizar em:
#   - ordem crescente
#   - ordem decrescente
#   - ordem de inserção
# 6 Crie uma função que remova todos os números ímpares de uma lisa encadeada
# 7 Crie uma função que receba um valor de busca e remova o nó caso encontre na lista
from time import clock
from no import No
from lista_encadeada import ListaEncadeada

primeiro = No(1)
segundo = No(2)
terceiro = No(3)

lista = ListaEncadeada()
# lista.inserir_inicio(primeiro)
# lista.inserir_inicio(segundo)
# lista.inserir_inicio(terceiro)
# lista.inserir_final(No(4))

# lista.mostrar()

# 1 Crie um algoritmo que popule dinamicamente um aray com 100.000 posições
array = []

for i in range(0, 100000):
    array += [i]
# print(clock())
# print(array)

# 2 Crie um algoritmo que popule uma lsita encadeada com 100.000 posiçõs

lista = ListaEncadeada()

for i in range(0, 100000):
    lista.inserir_inicio(No(i))

# lista.mostrar()

# 4 Implemente um método que receba um valor qualquer e um valor de busca
# * insira no proximo valor caso encontre
# * retorne erro se o valor não foi encontrado

# no

class No:
    def __init__(self, valor):
        self.anterior = None
        self.valor = valor
        self.proximo = None
        
# novo lista encadeada
    def inserir_final(self, novo):
        no = self.inicio
        while no is not None:
            if no.proximo is None:
                no.proximo = novo
                novo.anterior = no
                break
            no = no.proximo

    def inserir_qualquer_lugar(self, valor, valor_busca):
        no = self.inicio
        novo_valor = No(valor)
        while no is not None:
            if no.valor == valor_busca and no.proximo is None:
                no.proximo = novo_valor
                novo_valor.anterior = no
            elif no.valor == valor_busca and no.proximo is not None:
                no.proximo.proximo.anterior = novo_valor
                no.proximo = novo_valor
                novo_valor.anterior = 
                

